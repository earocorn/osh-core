/***************************** BEGIN LICENSE BLOCK ***************************

The contents of this file are subject to the Mozilla Public License, v. 2.0.
If a copy of the MPL was not distributed with this file, You can obtain one
at http://mozilla.org/MPL/2.0/.

Software distributed under the License is distributed on an "AS IS" basis,
WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
for the specific language governing rights and limitations under the License.
 
Copyright (C) 2019 Sensia Software LLC. All Rights Reserved.
 
******************************* END LICENSE BLOCK ***************************/

package org.sensorhub.api.database;

import org.sensorhub.api.datastore.command.EmptyCommandStore;
import org.sensorhub.api.datastore.command.ICommandStatusStore;
import org.sensorhub.api.datastore.command.ICommandStore;
import org.sensorhub.api.datastore.command.ICommandStreamStore;
import org.sensorhub.api.datastore.deployment.EmptyDeploymentStore;
import org.sensorhub.api.datastore.deployment.IDeploymentStore;
import org.sensorhub.api.datastore.feature.EmptyFoiStore;
import org.sensorhub.api.datastore.feature.IFoiStore;
import org.sensorhub.api.datastore.obs.IDataStreamStore;
import org.sensorhub.api.datastore.obs.IObsStore;
import org.sensorhub.api.datastore.system.EmptySystemStore;
import org.sensorhub.api.datastore.system.ISystemDescStore;


/**
 * <p>
 * Main interface for databases used to store data related to one or more
 * system instances. This include historized system description, observations,
 * commands, and associated sampling features (or more generally features of
 * interest).
 * </p><p>
 * A given instance of this interface can contain data associated to one or
 * more systems, but all information for a given observation system should be
 * kept in the same database.
 * </p>
 *
 * @author Alex Robin
 * @date Sep 17, 2019
 */
public interface IObsSystemDatabase extends IDatabase
{
    
    /**
     * @return Data store containing system descriptions and their history.<br/>
     * If the database does not support persisting system descriptions, return
     * an instance of {@link EmptySystemStore}
     */
    ISystemDescStore getSystemDescStore();
    
    
    /**
     * @return Data store containing features of interest observed by
     * the systems contained in this database.<br/>
     * If the database does not support persisting features of interest, return
     * an instance of {@link EmptyFoiStore}
     */
    IFoiStore getFoiStore();
    
    
    /**
     * @return Data store containing historical observations generated by
     * the systems contained in this database.<br/>
     * If the database does not support persisting observations, return an
     * instance of {@link EmptyCommandStore}
     */
    IObsStore getObservationStore();
    
    
    /**
     * @return Data store containing observation data streams generated by
     * the systems contained in this database
     */
    default IDataStreamStore getDataStreamStore()
    {
        return getObservationStore().getDataStreams();
    }
    
    
    /**
     * @return Data store containing historical commands received by
     * the systems contained in this database.<br/>
     * If the database does not support persisting commands, return an
     * instance of {@link EmptyCommandStore}
     */
    ICommandStore getCommandStore();
    
    
    /**
     * @return Data store containing command streams exposed by the systems
     * contained in this database
     */
    default ICommandStreamStore getCommandStreamStore()
    {
        return getCommandStore().getCommandStreams();
    }
    
    
    /**
     * @return Data store containing status logs of all commands stored
     * in this database
     */
    default ICommandStatusStore getCommandStatusStore()
    {
        return getCommandStore().getStatusReports();
    }
    
    
    /**
     * @return Data store containing the deployment descriptions.<br/>
     * If the database does not support persisting deployment descriptions,
     * return an instance of {@link EmptyDeploymentStore}
     */
    IDeploymentStore getDeploymentStore();
}
