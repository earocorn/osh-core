/***************************** BEGIN LICENSE BLOCK ***************************

The contents of this file are subject to the Mozilla Public License, v. 2.0.
If a copy of the MPL was not distributed with this file, You can obtain one
at http://mozilla.org/MPL/2.0/.

Software distributed under the License is distributed on an "AS IS" basis,
WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
for the specific language governing rights and limitations under the License.
 
Copyright (C) 2012-2015 Sensia Software LLC. All Rights Reserved.
 
******************************* END LICENSE BLOCK ***************************/

package org.sensorhub.impl.data;

import net.opengis.swe.v20.DataBlock;
import org.sensorhub.api.data.IDataProducer;
import org.sensorhub.api.data.IStreamingDataInterface;
import org.sensorhub.api.event.IEventHandler;
import org.sensorhub.api.event.IEventListener;
import org.sensorhub.impl.event.BasicEventHandler;
import org.sensorhub.impl.module.AbstractModule;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.vast.util.Asserts;


/**
 * <p>
 * Class providing default implementation of common data interface API methods.
 * </p>
 *
 * @author Alex Robin
 * @param <T> Type of parent entity
 * @since Sep 13, 2022
 */
public abstract class AbstractDataInterface<T extends IDataProducer> implements IStreamingDataInterface
{
    protected final T parent;
    protected final IEventHandler eventHandler;
    protected final String name;
    protected final Logger log;
    protected DataBlock latestRecord;
    protected long latestRecordTime = Long.MIN_VALUE;
    
    
    /**
     * Constructs a new output with the given name and attached to the provided parent entity.<br/>
     * Events generated by this output will be published using the parent system's event handler.
     * @param name output name
     * @param parent parent entity instance
     */
    protected AbstractDataInterface(String name, T parent)
    {
        this(name, parent, null);
    }
    
    
    /**
     * Constructs a new output with the given name and attached to the
     * provided parent entity.<br/>
     * @param name
     * @param parent
     * @param eventSrcInfo
     * @param log
     */
    protected AbstractDataInterface(String name, T parent, Logger log)
    {
        this.name = Asserts.checkNotNull(name, "name");
        this.parent = Asserts.checkNotNull(parent, "parent");
        this.eventHandler = new BasicEventHandler();
        
        // setup logger
        if (log == null)
        {
            if (parent instanceof AbstractModule)
                this.log = ((AbstractModule<?>)parent).getLogger();
            else
                this.log = LoggerFactory.getLogger(getClass().getCanonicalName());
        }
        else
            this.log = log;
    }
    
    
    @Override
    public T getParentProducer()
    {
        return parent;
    }
    
    
    @Override
    public String getName()
    {
        return name;
    }


    @Override
    public boolean isEnabled()
    {
        return true;
    }


    @Override
    public DataBlock getLatestRecord()
    {
        return latestRecord;
    }
    
    
    @Override
    public long getLatestRecordTime()
    {
        return latestRecordTime;
    }
    
    
    @Override
    public void registerListener(IEventListener listener)
    {
        eventHandler.registerListener(listener);
    }


    @Override
    public void unregisterListener(IEventListener listener)
    {
        eventHandler.unregisterListener(listener);
    }
    
    
    protected Logger getLogger()
    {
        return log; 
    }

}
